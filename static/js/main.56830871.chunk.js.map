{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onChange","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","event","console","log","target","value","backgroundColor","rows","onClick","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","defaultProps","Alert","word","alert","charAt","slice","msg","data-bs-dismiss","App","setMode","setAlert","setTimeout","body","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAMe,SAASA,EAAOC,GAC3B,OACI,yBAAKC,UAAS,yCAAoCD,EAAME,KAAI,eAAOF,EAAME,OACrE,yBAAKD,UAAU,mBAGP,uBAAGA,UAAU,eAAeE,KAAK,KAAKH,EAAMI,OAC5C,4BAAQH,UAAU,iBAAiBI,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACxL,0BAAMT,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BU,GAAG,0BACzC,wBAAIV,UAAU,mCACV,wBAAIA,UAAU,YACV,uBAAGA,UAAU,kBAAkBW,eAAa,OAAOT,KAAK,KAAG,SAE/D,wBAAIF,UAAU,YACV,uBAAGA,UAAU,WAAWE,KAAK,KAAKH,EAAMa,aAGhD,yBAAKZ,UAAS,sCAAgD,UAAfD,EAAME,KAAmB,OAAS,UAC7E,2BAAOD,UAAU,mBAAmBa,SAAUd,EAAMe,WAAYV,KAAK,WAAWW,KAAK,SAASL,GAAG,2BACjG,2BAAOV,UAAU,mBAAmBgB,QAAQ,0BAAwB,iBCxBjF,SAASC,EAASlB,GAE7B,IAuCA,EAAwBmB,mBAAS,IAAG,mBAA7BC,EAAI,KAAEC,EAAO,KACpB,OACI,oCACA,yBAAKpB,UAAU,YAAYqB,MAAO,CAACC,MAAoB,SAAbvB,EAAME,KAAc,QAAQ,UAClE,4BAAKF,EAAMwB,QAAO,KAClB,yBAAKvB,UAAU,QAEX,8BAAUA,UAAU,eAAea,SAX1B,SAACW,GAClBC,QAAQC,IAAI,WACZN,EAAQI,EAAMG,OAAOC,QASgDP,MAAO,CAACQ,gBAA8B,SAAb9B,EAAME,KAAc,UAAU,QAASqB,MAAoB,SAAbvB,EAAME,KAAc,QAAQ,SAAU2B,MAAOT,EAAMT,GAAG,QAAQoB,KAAK,OAE3M,4BAAQ9B,UAAS,uBAA0B+B,QAhD/B,WAChBN,QAAQC,IAAI,yBACZN,EAAQD,EAAKa,eACbjC,EAAMkC,UAAU,yBAAyB,aA6C6B,wBAClE,4BAAQjC,UAAS,uBAA0B+B,QA5C9B,WACjBN,QAAQC,IAAI,yBACZN,EAAQD,EAAKe,eACbnC,EAAMkC,UAAU,yBAAyB,aAyC8B,wBACnE,4BAAQjC,UAAS,uBAA0B+B,QAvC5B,WACnBX,EAAQ,IAERrB,EAAMkC,UAAU,UAAU,aAoC+C,cACrE,4BAAQjC,UAAS,uBAA0B+B,QAhC7B,WAClBN,QAAQC,IAAI,WACZ,IAAIP,EAAKgB,SAASC,eAAe,SACjCjB,EAAKkB,SAELC,UAAUC,UAAUC,UAAUrB,EAAKS,OACnC7B,EAAMkC,UAAU,2BAA2B,aA0B6B,aACpE,4BAAQjC,UAAS,uBAA0B+B,QAvB5B,WACnB,IAAIU,EAAStB,EAAKuB,MAAM,QACxBtB,EAAQqB,EAAQE,KAAK,MACrB5C,EAAMkC,UAAU,uBAAuB,aAoBkC,wBAIzE,yBAAKjC,UAAU,iBAAiBqB,MAAO,CAACC,MAAoB,SAAbvB,EAAME,KAAc,QAAQ,UACvE,iDACA,2BAAIkB,EAAKuB,MAAM,KAAKE,OAAM,cAAazB,EAAKyB,OAAM,eAClD,2BAAK,KAAMzB,EAAKuB,MAAM,KAAKE,OAAM,yBACjC,uCACA,2BAAIzB,KDZhBrB,EAAO+C,aAAe,CAClB1C,MAAO,iBACPS,UAAW,iBExCAkC,MAdf,SAAe/C,GACX,IAAkBgD,EAGlB,OACIhD,EAAMiD,OAAS,6BACX,yBAAKhD,UAAS,sBAAiBD,EAAMiD,MAAM5C,KAAI,gCAAgCW,KAAK,SAChF,iCANMgC,EAMchD,EAAMiD,MAAM5C,MAL5B6C,OAAO,GAAGjB,cAAgBe,EAAKG,MAAM,GAKJ,KAAYnD,EAAMiD,MAAMG,IAC7D,4BAAQ/C,KAAK,SAASJ,UAAU,YAAYoD,kBAAgB,QAAQ3C,aAAW,aCwDhF4C,MAnDf,WACE,MAAwBnC,mBAAS,SAAQ,mBAAlCjB,EAAI,KAAEqD,EAAO,KACpB,EAA0BpC,mBAAS,MAAK,mBAAjC8B,EAAK,KAAEO,EAAQ,KAGhBtB,EAAY,SAACkB,EAAK/C,GACtBmD,EAAS,CACPJ,IAAKA,EACL/C,KAAMA,IAERoD,YAAW,WACTD,EAAS,QACR,MAoBL,OACE,oCAEE,kBAACzD,EAAM,CAACK,MAAM,YAAYS,UAAU,WAAWX,KAAMA,EAAMa,WAlB5C,WACJ,UAATb,GACFqD,EAAQ,QACRnB,SAASsB,KAAKpC,MAAMQ,gBAAkB,UACtCI,EAAU,6BAA8B,WACxCE,SAAShC,MAAQ,uBAGjBmD,EAAQ,SACRnB,SAASsB,KAAKpC,MAAMQ,gBAAkB,QACtCI,EAAU,8BAA+B,WACzCE,SAAShC,MAAQ,0BAQjB,kBAAC,EAAK,CAAC6C,MAAOA,IACd,yBAAKhD,UAAU,kBAKT,kBAACiB,EAAQ,CAACgB,UAAWA,EAAWV,QAAQ,4BAA4BtB,KAAMA,OC7ClEyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAG,MAAK7B,SAASC,eAAe,SD2H3C,kBAAmBE,WACrBA,UAAU2B,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.56830871.chunk.js","sourcesContent":["import React from 'react'\r\n// import React, { Component } from 'react'\r\n// import PropTypes from 'prop-types'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n               \r\n\r\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n                            </li>\r\n                        </ul>\r\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onChange={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                        </div>\r\n                        {/* <div className=\"btn-group\" role=\"group\" aria-label=\"Basic radio toggle button group\">\r\n                            <input type=\"radio\" className=\"btn-check\" onChange={props.changeColor('primary')} name=\"btnradio\" id=\"btnradio1\" autocomplete=\"off\" defaultChecked />\r\n                            <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio1\">Blue</label>\r\n\r\n                            <input type=\"radio\" className=\"btn-check\" onChange={props.changeColor('danger')} name=\"btnradio\" id=\"btnradio2\" autocomplete=\"off\" />\r\n                            <label className=\"btn btn-outline-danger\" htmlFor=\"btnradio2\">Red</label>\r\n\r\n                            <input type=\"radio\" className=\"btn-check\" onClick={props.changeColor('success')} name=\"btnradio\" id=\"btnradio3\" autocomplete=\"off\" />\r\n                            <label className=\"btn btn-outline-success\" htmlFor=\"btnradio3\">Green</label> */}\r\n                        {/* </div> */}\r\n                        {/* <form className=\"d-flex\" role=\"search\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    </div>\r\n                \r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n//setting a type \r\nNavbar.defaultProps = {\r\n    title: 'set title here',\r\n    aboutText: 'abouttexthere'\r\n}\r\n//setting default values if nothing is passed","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick=()=>{\r\n        console.log(\"UpperCase was clicked\")\r\n        setText(text.toUpperCase())\r\n        props.showAlert(\"Converted to UpperCase\",\"success\")\r\n    }\r\n    const handleLowClick=()=>{\r\n        console.log(\"LowerCase was clicked\")\r\n        setText(text.toLowerCase())\r\n        props.showAlert(\"Converted to LowerCase\",\"success\")\r\n\r\n    }\r\n    const handleClearClick=()=>{\r\n        setText('')\r\n\r\n        props.showAlert(\"Cleared\",\"success\")\r\n\r\n    }\r\n    \r\n    \r\n    const handleCopyClick=()=>{\r\n        console.log(\"im copy\")\r\n        var text=document.getElementById('MyBox')\r\n        text.select();\r\n        // text.setSelectionRange(0,9999)\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Text copied to Clipboard\",\"success\")\r\n\r\n    }\r\n\r\n    const handleExtraSpace=()=>{\r\n        let newText =text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Removed Extra Spaces\",\"success\")\r\n\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"changed\")\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <> \r\n        <div className='container' style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading} </h1>\r\n            <div className=\"mb-3\">\r\n                {/* <label for=\"MyBox\" className=\"form-label\">Example text area</label> */}\r\n                <textarea className=\"form-control\" onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#343a40':'white', color: props.mode==='dark'?'white':'black'}} value={text} id=\"MyBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className={`btn btn-primary mx-2`} onClick={handleUpClick}>Convert to UPPERCASE</button>\r\n            <button className={`btn btn-primary mx-2`} onClick={handleLowClick}>Convert to lowercase</button>\r\n            <button className={`btn btn-primary mx-2`} onClick={handleClearClick}>Clear Text</button>\r\n            <button className={`btn btn-primary mx-2`} onClick={handleCopyClick}>Copy Text</button>\r\n            <button className={`btn btn-primary mx-2`} onClick={handleExtraSpace}>Remove Extra Spaces</button>\r\n            {/* <button className=\"btn btn-primary mx-2\" onClick={handleItalics}>Convert to <i>Italics</i></button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleBold}>Convert to <b>Bold</b></button> */}\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h2>Your Text summary</h2>\r\n            <p>{text.split(\" \").length} Words and {text.length} characters</p>\r\n            <p>{ 0.008*text.split(\" \").length} Minutes Reading time</p>\r\n            <h2>Preview</h2>\r\n            <p>{text}</p>\r\n        </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capatalize=(word)=>{\r\n        return word.charAt(0).toUpperCase() + word.slice(1)\r\n    }\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capatalize(props.alert.type)} </strong>{props.alert.msg} \r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\"\n\nfunction App() {\n  const [mode, setMode] = useState('light') //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null)\n  // const [color, setColor] = useState('primary')\n\n  const showAlert = (msg, type) => {\n    setAlert({\n      msg: msg,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000)\n  }\n  // const changeColor = (clr) => {\n  //   setColor(clr)\n  // }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#343a40'\n      showAlert('Dark Mode has been Enabled', 'success')\n      document.title = 'TextUtils DarkMode'\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert('Light Mode has been Enabled', 'success')\n      document.title = 'TextUtils LightMode'\n\n    }\n  }\n  return (\n    <>\n\n      <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        \n           \n\n          \n            <TextForm showAlert={showAlert} heading=\"Enter the Text to Analyze\" mode={mode}  />\n         \n        {/* here my-3 is for margin in y axis */}\n\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}